source('~/RCode/GA/NBA/GA_Driver.R')
max_individual <- pop[fitness_values==max_fitness,]
classifier <- pop[fitness_values==max_fitness,]
classifier
classifier <- colMean(pop[fitness_values==max_fitness,])
classifier <- colMeans(pop[fitness_values==max_fitness,])
classifier
##------------------------------------------------------/
team_a <- "IND"
team_b <- "TOR"
eval(parse(text = paste("team_a_tstats<-data.matrix(",team_a,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_a_pstats<-data.matrix(",team_a,"_PlayerStats",Tr_yr,"[,3:40])",sep="")))
eval(parse(text = paste("team_b_tstats<-data.matrix(",team_b,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_b_pstats<-data.matrix(",team_b,"_PlayerStats",Tr_yr,"[,3:40])",sep="")))
team_a_num <- mean((team_a_pstats%*%individual[1:38])) + team_a_tstats%*%individual[39:44]
team_b_num <- mean((team_b_pstats%*%individual[1:38])) + team_b_tstats%*%individual[39:44]
team_a_num
if (team_a_num > team_b_num){cat("Winner:",as.character(team_a))}else cat("Winner:",as.character(team_b))
team_b_num
source('~/RCode/GA/NBA/NBAPrediction.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Pr_yr
Tr_yr
source('~/RCode/GA/NBA/NBAPrediction.R')
for (t1 in 1:length(team_list)){
assign(paste(team_list[t1],"_Team",Pr_yr,sep=""),players[players$Tm==team_list[t1] & players$Season==Pr_yr,])
assign(paste(team_list[t1],"_PlayerStats",Pr_yr,sep=""),players[players$Tm==team_list[t1] & players$Season==Pr_yr,])
assign(paste(team_list[t1],"_TeamStats",Pr_yr,sep=""),teamdata[teamdata$Acronym==team_list[t1],(((12-Pr_yr)*6-3):((12-Pr_yr)*6+2))])
}
source('~/RCode/GA/NBA/NBAPrediction.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
0.67**4
.201*186.66
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
load("~/RCode/GA/NBA/NBA_GA_Predictions.Rproj")
library(rJava)
library(XLConnect)
install.packages("rJava")
install.packages("XLConnect")
library(rJava)
library(XLConnect)
load("~/RCode/GA/NBA/NBA_GA_Predictions.Rproj")
library(rJava)
library(XLConnect)
java -version
load("~/RCode/GA/NBA/NBA_GA_Predictions.Rproj")
library(rJava)
library(XLConnect)
date_list <- mat.or.vec(1,num_predictions)
current_data$Date[d+start_game_index-1]
winner_list <- mat.or.vec(1,num_predictions)
psf_list <- mat.or.vec(1,num_predictions)
sum_list <- mat.or.vec(1,num_predictions)
date_list <- mat.or.vec(1,num_predictions)
for (d in 1:num_predictions){#cycle through the days to predict and spit out the predictions
team_a <- current_data$Vacronym[d+start_game_index-1]
team_b <- current_data$Hacronym[d+start_game_index-1]
score_data<-current_data
#classifier <- colMeans(pop[fitness_values==max_fitness,])
classifier <- individual
eval(parse(text = paste("team_a_tstats<-data.matrix(",team_a,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_a_pstats<-data.matrix(",team_a,"_PlayerStats",Tr_yr,"[,p_stat_indices])",sep="")))
eval(parse(text = paste("team_b_tstats<-data.matrix(",team_b,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_b_pstats<-data.matrix(",team_b,"_PlayerStats",Tr_yr,"[,p_stat_indices])",sep="")))
team_a_dates <- current_data$Date[regexpr(team_a,current_data$Hacronym)>0 | regexpr(team_a,current_data$Vacronym)>0]
team_b_dates <- current_data$Date[regexpr(team_b,current_data$Hacronym)>0 | regexpr(team_b,current_data$Vacronym)>0]
current_date <- todays_date
if (any(as.numeric(current_date-team_a_dates)>0)){
team_a_rest<- min(as.numeric(current_date-team_a_dates)[(as.numeric(current_date-team_a_dates)>0)])
} else{
team_a_rest <- 7
}
if (any(as.numeric(current_date-team_b_dates)>0)){
team_b_rest <- min(as.numeric(current_date-team_b_dates)[(as.numeric(current_date-team_b_dates)>0)])
}else{
team_b_rest <- 7
}
## Now create luck and streak stats
#streak
num_prev_games_a <- sum(team_a_dates<=current_date)
num_prev_games_b <- sum(team_b_dates<=current_date)
winner_list_a <- mat.or.vec(1,num_prev_games_a)
winner_list_b <- mat.or.vec(1,num_prev_games_b)
for (sa in 1:num_prev_games_a){# These next two loops create a binary win (1) loss (-1) vector for all previous played games
date_checkeda <- team_a_dates[sa]
if(length(winner_list_a)>1){
if (score_data$Winner[score_data$Date==date_checkeda &(score_data$Hacronym==team_a | score_data$Vacronym==team_a)]==team_a){
winner_list_a[sa]<-1
}else{
winner_list_a[sa]<- -1
}
}else{
winner_list_a[sa]<-1
}
}
for (sb in 1:num_prev_games_b){
date_checkedb <- team_b_dates[sb]
if(length(winner_list_b)>1){
if (score_data$Winner[score_data$Date==date_checkedb &(score_data$Hacronym==team_b | score_data$Vacronym==team_b)]==team_b){
winner_list_b[sb]<-1
}else{
winner_list_b[sb]<- -1
}
}else{
winner_list_b[sb]<-1
}
}
# Now we need to turn the above win/loss binary vector into a streak number (most recent game outcome is last in vector)
winner_list_a<-rev(winner_list_a)
winner_list_b<-rev(winner_list_b)
if (abs(sum(winner_list_a))==length(winner_list_a)){
streak_a_stat <- sum(winner_list_a)
}else{
if (length(winner_list_a)>1){
streak_a <- c((seq(1:length(winner_list_a))[winner_list_a==-1][1])-1,-((seq(1:length(winner_list_a))[winner_list_a==1][1])-1))
streak_a_stat <- streak_a[abs(streak_a)==max(abs(streak_a))]
} else{
streak_a_stat <- winner_list_a
}
}
if (abs(sum(winner_list_b))==length(winner_list_b)){
streak_b_stat <- sum(winner_list_b)
}else{
if (length(winner_list_b)>1){
streak_b <- c((seq(1:length(winner_list_b))[winner_list_b==-1][1])-1,-((seq(1:length(winner_list_b))[winner_list_b==1][1])-1))
streak_b_stat <- streak_b[abs(streak_b)==max(abs(streak_b))]
}else{
streak_b_stat <- winner_list_b
}
}
team_a_sstats <- c(-1,team_a_rest,streak_a_stat)
team_b_sstats <- c(1,team_b_rest,streak_b_stat)
num_players_a <- dim(team_a_pstats)[1]
num_players_b <- dim(team_b_pstats)[1]
team_a_pstats<-matrix(as.numeric(team_a_pstats),num_players_a,player_char_num)
team_b_pstats<-matrix(as.numeric(team_b_pstats),num_players_b,player_char_num)
team_a_num <- mean((team_a_pstats%*%individual[1:player_char_num])) +
team_a_tstats%*%individual[(player_char_num+1):(player_char_num+team_char_num)] +
team_a_sstats%*%individual[(player_char_num+team_char_num+1):(player_char_num+team_char_num+schedule_char_num)]
team_b_num <- mean((team_b_pstats%*%individual[1:player_char_num])) +
team_b_tstats%*%individual[(player_char_num+1):(player_char_num+team_char_num)] +
team_b_sstats%*%individual[(player_char_num+team_char_num+1):(player_char_num+team_char_num+schedule_char_num)]
if (team_a_num > team_b_num){
num_calc <- team_a_num-team_b_num
psf_list[d] <- num_calc*m_psf+b_psf
#cat("Winner:",as.character(team_a),". PSF:",as.character(psf_calc))
winner_list[d] <- as.character(team_a)
}else {
num_calc <- team_b_num-team_a_num
psf_list[d] <- num_calc*num_calc*m_psf+b_psf
#cat("Winner:",as.character(team_b),". PSF:",as.character(psf_calc))
winner_list[d] <- as.character(team_b)
}
sum_list[d] <- (team_b_num + team_a_num)*m_sum + b_sum
date_list[d] <- current_data$Date[d+start_game_index-1]
}# End prediction Loop (d)
prediction.frame <- data.frame("Date" <- date_list, "Winner" <- winner_list, "psf" <- psf_list, "Sum" <- sum_list)
prediction.frame <- data.frame("Date" <- t(date_list), "Winner" <- t(winner_list), "psf" <- t(psf_list), "Sum" <- t(sum_list))
View(prediction.frame)
prediction.frame <- data.frame("Date" = t(date_list), "Winner" = t(winner_list), "psf" = t(psf_list), "Sum" = t(sum_list))
View(prediction.frame)
prediction.frame$Date[1]
as.date(prediction.frame$Date[1])
as.Date(prediction.frame$Date[1])
?as.Date
current_data$Date[d+start_game_index-1]
as.character(current_data$Date[d+start_game_index-1])
winner_list <- mat.or.vec(1,num_predictions)
psf_list <- mat.or.vec(1,num_predictions)
sum_list <- mat.or.vec(1,num_predictions)
date_list <- mat.or.vec(1,num_predictions)
for (d in 1:num_predictions){#cycle through the days to predict and spit out the predictions
team_a <- current_data$Vacronym[d+start_game_index-1]
team_b <- current_data$Hacronym[d+start_game_index-1]
score_data<-current_data
#classifier <- colMeans(pop[fitness_values==max_fitness,])
classifier <- individual
eval(parse(text = paste("team_a_tstats<-data.matrix(",team_a,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_a_pstats<-data.matrix(",team_a,"_PlayerStats",Tr_yr,"[,p_stat_indices])",sep="")))
eval(parse(text = paste("team_b_tstats<-data.matrix(",team_b,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_b_pstats<-data.matrix(",team_b,"_PlayerStats",Tr_yr,"[,p_stat_indices])",sep="")))
team_a_dates <- current_data$Date[regexpr(team_a,current_data$Hacronym)>0 | regexpr(team_a,current_data$Vacronym)>0]
team_b_dates <- current_data$Date[regexpr(team_b,current_data$Hacronym)>0 | regexpr(team_b,current_data$Vacronym)>0]
current_date <- todays_date
if (any(as.numeric(current_date-team_a_dates)>0)){
team_a_rest<- min(as.numeric(current_date-team_a_dates)[(as.numeric(current_date-team_a_dates)>0)])
} else{
team_a_rest <- 7
}
if (any(as.numeric(current_date-team_b_dates)>0)){
team_b_rest <- min(as.numeric(current_date-team_b_dates)[(as.numeric(current_date-team_b_dates)>0)])
}else{
team_b_rest <- 7
}
## Now create luck and streak stats
#streak
num_prev_games_a <- sum(team_a_dates<=current_date)
num_prev_games_b <- sum(team_b_dates<=current_date)
winner_list_a <- mat.or.vec(1,num_prev_games_a)
winner_list_b <- mat.or.vec(1,num_prev_games_b)
for (sa in 1:num_prev_games_a){# These next two loops create a binary win (1) loss (-1) vector for all previous played games
date_checkeda <- team_a_dates[sa]
if(length(winner_list_a)>1){
if (score_data$Winner[score_data$Date==date_checkeda &(score_data$Hacronym==team_a | score_data$Vacronym==team_a)]==team_a){
winner_list_a[sa]<-1
}else{
winner_list_a[sa]<- -1
}
}else{
winner_list_a[sa]<-1
}
}
for (sb in 1:num_prev_games_b){
date_checkedb <- team_b_dates[sb]
if(length(winner_list_b)>1){
if (score_data$Winner[score_data$Date==date_checkedb &(score_data$Hacronym==team_b | score_data$Vacronym==team_b)]==team_b){
winner_list_b[sb]<-1
}else{
winner_list_b[sb]<- -1
}
}else{
winner_list_b[sb]<-1
}
}
# Now we need to turn the above win/loss binary vector into a streak number (most recent game outcome is last in vector)
winner_list_a<-rev(winner_list_a)
winner_list_b<-rev(winner_list_b)
if (abs(sum(winner_list_a))==length(winner_list_a)){
streak_a_stat <- sum(winner_list_a)
}else{
if (length(winner_list_a)>1){
streak_a <- c((seq(1:length(winner_list_a))[winner_list_a==-1][1])-1,-((seq(1:length(winner_list_a))[winner_list_a==1][1])-1))
streak_a_stat <- streak_a[abs(streak_a)==max(abs(streak_a))]
} else{
streak_a_stat <- winner_list_a
}
}
if (abs(sum(winner_list_b))==length(winner_list_b)){
streak_b_stat <- sum(winner_list_b)
}else{
if (length(winner_list_b)>1){
streak_b <- c((seq(1:length(winner_list_b))[winner_list_b==-1][1])-1,-((seq(1:length(winner_list_b))[winner_list_b==1][1])-1))
streak_b_stat <- streak_b[abs(streak_b)==max(abs(streak_b))]
}else{
streak_b_stat <- winner_list_b
}
}
team_a_sstats <- c(-1,team_a_rest,streak_a_stat)
team_b_sstats <- c(1,team_b_rest,streak_b_stat)
num_players_a <- dim(team_a_pstats)[1]
num_players_b <- dim(team_b_pstats)[1]
team_a_pstats<-matrix(as.numeric(team_a_pstats),num_players_a,player_char_num)
team_b_pstats<-matrix(as.numeric(team_b_pstats),num_players_b,player_char_num)
team_a_num <- mean((team_a_pstats%*%individual[1:player_char_num])) +
team_a_tstats%*%individual[(player_char_num+1):(player_char_num+team_char_num)] +
team_a_sstats%*%individual[(player_char_num+team_char_num+1):(player_char_num+team_char_num+schedule_char_num)]
team_b_num <- mean((team_b_pstats%*%individual[1:player_char_num])) +
team_b_tstats%*%individual[(player_char_num+1):(player_char_num+team_char_num)] +
team_b_sstats%*%individual[(player_char_num+team_char_num+1):(player_char_num+team_char_num+schedule_char_num)]
if (team_a_num > team_b_num){
num_calc <- team_a_num-team_b_num
psf_list[d] <- num_calc*m_psf+b_psf
#cat("Winner:",as.character(team_a),". PSF:",as.character(psf_calc))
winner_list[d] <- as.character(team_a)
}else {
num_calc <- team_b_num-team_a_num
psf_list[d] <- num_calc*num_calc*m_psf+b_psf
#cat("Winner:",as.character(team_b),". PSF:",as.character(psf_calc))
winner_list[d] <- as.character(team_b)
}
sum_list[d] <- (team_b_num + team_a_num)*m_sum + b_sum
date_list[d] <- as.character(current_data$Date[d+start_game_index-1])
}# End prediction Loop (d)
prediction.frame <- data.frame("Date" = t(date_list), "Winner" = t(winner_list), "psf" = t(psf_list), "Sum" = t(sum_list))
View(prediction.frame)
winner_list <- mat.or.vec(1,num_predictions)
psf_list <- mat.or.vec(1,num_predictions)
sum_list <- mat.or.vec(1,num_predictions)
date_list <- mat.or.vec(1,num_predictions)
for (d in 1:num_predictions){#cycle through the days to predict and spit out the predictions
team_a <- current_data$Vacronym[d+start_game_index-1]
team_b <- current_data$Hacronym[d+start_game_index-1]
score_data<-current_data
#classifier <- colMeans(pop[fitness_values==max_fitness,])
classifier <- individual
eval(parse(text = paste("team_a_tstats<-data.matrix(",team_a,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_a_pstats<-data.matrix(",team_a,"_PlayerStats",Tr_yr,"[,p_stat_indices])",sep="")))
eval(parse(text = paste("team_b_tstats<-data.matrix(",team_b,"_TeamStats",Tr_yr,")",sep="")))
eval(parse(text = paste("team_b_pstats<-data.matrix(",team_b,"_PlayerStats",Tr_yr,"[,p_stat_indices])",sep="")))
team_a_dates <- current_data$Date[regexpr(team_a,current_data$Hacronym)>0 | regexpr(team_a,current_data$Vacronym)>0]
team_b_dates <- current_data$Date[regexpr(team_b,current_data$Hacronym)>0 | regexpr(team_b,current_data$Vacronym)>0]
current_date <- todays_date
if (any(as.numeric(current_date-team_a_dates)>0)){
team_a_rest<- min(as.numeric(current_date-team_a_dates)[(as.numeric(current_date-team_a_dates)>0)])
} else{
team_a_rest <- 7
}
if (any(as.numeric(current_date-team_b_dates)>0)){
team_b_rest <- min(as.numeric(current_date-team_b_dates)[(as.numeric(current_date-team_b_dates)>0)])
}else{
team_b_rest <- 7
}
## Now create luck and streak stats
#streak
num_prev_games_a <- sum(team_a_dates<=current_date)
num_prev_games_b <- sum(team_b_dates<=current_date)
winner_list_a <- mat.or.vec(1,num_prev_games_a)
winner_list_b <- mat.or.vec(1,num_prev_games_b)
for (sa in 1:num_prev_games_a){# These next two loops create a binary win (1) loss (-1) vector for all previous played games
date_checkeda <- team_a_dates[sa]
if(length(winner_list_a)>1){
if (score_data$Winner[score_data$Date==date_checkeda &(score_data$Hacronym==team_a | score_data$Vacronym==team_a)]==team_a){
winner_list_a[sa]<-1
}else{
winner_list_a[sa]<- -1
}
}else{
winner_list_a[sa]<-1
}
}
for (sb in 1:num_prev_games_b){
date_checkedb <- team_b_dates[sb]
if(length(winner_list_b)>1){
if (score_data$Winner[score_data$Date==date_checkedb &(score_data$Hacronym==team_b | score_data$Vacronym==team_b)]==team_b){
winner_list_b[sb]<-1
}else{
winner_list_b[sb]<- -1
}
}else{
winner_list_b[sb]<-1
}
}
# Now we need to turn the above win/loss binary vector into a streak number (most recent game outcome is last in vector)
winner_list_a<-rev(winner_list_a)
winner_list_b<-rev(winner_list_b)
if (abs(sum(winner_list_a))==length(winner_list_a)){
streak_a_stat <- sum(winner_list_a)
}else{
if (length(winner_list_a)>1){
streak_a <- c((seq(1:length(winner_list_a))[winner_list_a==-1][1])-1,-((seq(1:length(winner_list_a))[winner_list_a==1][1])-1))
streak_a_stat <- streak_a[abs(streak_a)==max(abs(streak_a))]
} else{
streak_a_stat <- winner_list_a
}
}
if (abs(sum(winner_list_b))==length(winner_list_b)){
streak_b_stat <- sum(winner_list_b)
}else{
if (length(winner_list_b)>1){
streak_b <- c((seq(1:length(winner_list_b))[winner_list_b==-1][1])-1,-((seq(1:length(winner_list_b))[winner_list_b==1][1])-1))
streak_b_stat <- streak_b[abs(streak_b)==max(abs(streak_b))]
}else{
streak_b_stat <- winner_list_b
}
}
team_a_sstats <- c(-1,team_a_rest,streak_a_stat)
team_b_sstats <- c(1,team_b_rest,streak_b_stat)
num_players_a <- dim(team_a_pstats)[1]
num_players_b <- dim(team_b_pstats)[1]
team_a_pstats<-matrix(as.numeric(team_a_pstats),num_players_a,player_char_num)
team_b_pstats<-matrix(as.numeric(team_b_pstats),num_players_b,player_char_num)
team_a_num <- mean((team_a_pstats%*%individual[1:player_char_num])) +
team_a_tstats%*%individual[(player_char_num+1):(player_char_num+team_char_num)] +
team_a_sstats%*%individual[(player_char_num+team_char_num+1):(player_char_num+team_char_num+schedule_char_num)]
team_b_num <- mean((team_b_pstats%*%individual[1:player_char_num])) +
team_b_tstats%*%individual[(player_char_num+1):(player_char_num+team_char_num)] +
team_b_sstats%*%individual[(player_char_num+team_char_num+1):(player_char_num+team_char_num+schedule_char_num)]
if (team_a_num > team_b_num){
num_calc <- team_a_num-team_b_num
psf_list[d] <- num_calc*m_psf+b_psf
#cat("Winner:",as.character(team_a),". PSF:",as.character(psf_calc))
winner_list[d] <- as.character(team_a)
}else {
num_calc <- team_b_num-team_a_num
psf_list[d] <- num_calc*m_psf+b_psf
#cat("Winner:",as.character(team_b),". PSF:",as.character(psf_calc))
winner_list[d] <- as.character(team_b)
}
sum_list[d] <- (team_b_num + team_a_num)*m_sum + b_sum
date_list[d] <- as.character(current_data$Date[d+start_game_index-1])
}# End prediction Loop (d)
prediction.frame <- data.frame("Date" = t(date_list), "Winner" = t(winner_list), "psf" = t(psf_list), "Sum" = t(sum_list))
View(prediction.frame)
wb<-loadWorkbook("Predictions.xls",create=TRUE)
createSheet(wb,"Predictions")
writeWorksheet(wb,prediction.frame,"Predictions",startRow=1,startCol=1)
saveWorkbook(wb)
install.packages('bigmemory.sri')
2**30
2**31
memory.limit()
??bigmatrix
??big.matrix
??big
install.packages(c("ggplot2", "gridBase"))
library(ggplot2)
library(grid)
bg <- data.frame(xmin = 0, xmax = 180, ymin = 0, ymax = 180)
bg_col <- rgb(0.8,0,0)
bars <- data.frame(xmin = c(35, 35), xmax = c(145, 145), ymin = c(45, 100), ymax = c(80, 135), groups = c("first", "second") )
bars_col <- rgb(0.9, 0.56, 0.56)
p <- ggplot(bg, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
geom_rect(fill = bg_col)+
geom_rect(data = bars, fill = bars_col, aes(group = groups))+
coord_fixed()+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
theme(line = element_blank(),
text = element_blank(),
rect = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks.margin = unit(0, "cm"),
axis.ticks.length = unit(0, "cm")) -> p
plot(p)
points(0.5,0.5)
plot(p)
points(0.5,0.5)
head(diamonds)
dim(diamonds)
library(XLConnect)
install.packages(c("XLConnect", "stringr"))
library(XLConnect)
install.packages("rJava")
library(XLConnect)
install.packages("rjson")
install.packages("C:/Users/Nick/rjson_0.2.12.zip", repos = NULL)
library(rjson)
data = data.frame("label"=c("A",NA,"B",NA,NA,"C",NA,"D",NA,NA,NA,NA,NA,"E",NA,"F"))
data
summary(data)
seq(1,dim(data)[1],by=1)
1:(dim(data)[1])
non.na.index = function(x,data){if(is.na(data[x])){non.na.index(x-1,data)}else{data[x]}}
new.column = sapply(1:(dim(data)[1]),function(x) non.na.index(x,data$label))
new.column
setwd("C:/Users/Nick/Documents/RCode/BeerScraper")
library(XLConnect)
library(XML)
library(tm)
library(Rstem)
library(Snowball)
library(RWeka)
